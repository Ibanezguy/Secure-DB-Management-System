#!/bin/bash
#####################################################
#Program Name: admin_script
#This is the fsd admin script
#Programmed by Joshua Konecki
#Read-only must have identical description
#to read/write counterpart
#####################################################
. /home/openfolder/admin_functions
#Prevent Exit
#TODO uncomment trap line
#trap '' INT


get_users
select_user
#This while is not indented because it encompasses
#most of the script.
while [ "LOOP_FOREVER! <):-D)-|-<" ]; do
#Build file with user permissions (send username)
retrieve_screens $user

#Display options for user
clear

echo -n "             "
echo -n "Here are the available $typeWord"
echo "s for user $user:"
echo ""
display_screens
tput cup 19 0
echo " 1)Add permission for user $user"
echo " 2)Remove permission for user $user"
#echo "3)Change access type (r/w) for user $user"
echo -n " 3)Edit a different user or "
echo "switch screen/command/report"
echo " Enter an option 1-3, or q to quit, then press ENTER."
echo -n " ->:"
read mainMenuChoice

case $mainMenuChoice in
1)#User elects to add permissions

flag=0 #Flag allows exit from choice 1 loop
addList=()
additionChoices=()
readChoices=()
sep="|"
#User decides whether to add screens/commands/reports
while [ $flag -eq 0 ]; do
  alreadyAdded=1 #Signals that a choice is 
               #previously selected
  if [ ${#canAdd[@]} -eq 0 ]; then
    flag=1
    clear
    tput cup 21 0
    echo -n " User $user has access to all $typeWord"
    echo "s."
    echo " returning to main menu..."
    echo -n " Press ENTER."
    read
  else
    noaccessSize=${#canAdd[@]}
    while [ "$alreadyAdded" -eq 1 ]; do
      clear
      echo -n "             Here are the $typeWord"
      echo "s which" \
            "may be added for $user:"
      echo "             * Read-only version is available."
      echo ""
      display_noaccess
      tput cup 20 0
      echo -n " Here are the $typeWord"
      echo "s selected for adding:"
      echo " ${addList[@]}"
      echo " Enter number to add then press ENTER."
      echo -n " ->:"
      read toAdd
      switchAdded=0
      for i in "${addList[@]}"; do
        if [ $i -eq $toAdd ]; then
          switchAdded=1
          echo "$typeWord $toAdd has already been selected."
          echo -n "Press ENTER:"
          read
        fi
      done
      if [ "$switchAdded" -eq 1 ]; then
        :
      else
        alreadyAdded=0
      fi
    done
    if (( $toAdd>0 && $toAdd<=$noaccessSize )); then
      #Screen ID is added to array, rather than user input
      addList+=($toAdd)
      selectedName=$(echo "${canAdd[(($toAdd-1))]}" \
                      | cut -d "|" -f2)
      selectedID=$(echo "${canAdd[(($toAdd-1))]}" \
                      | cut -d "|" -f1)
      hasReadOnly=0
      for i in ${readOnlyList[@]}; do
        if [ "$selectedName" == "$i" ]; then
          hasReadOnly=1
        fi
      done
      if [ $hasReadOnly -eq 0 ]; then
        ronly=0
        additionChoices+=("$selectedName$sep$ronly$sep$selectedID")
      else
        inputCheck=0
        while [ $inputCheck -eq 0 ]; do
          clear
          echo -n "               "
          echo -n " Here are the $typeWord"
          echo -n "s which "
          echo "may be added for $user:"
          echo -n "            "
          echo "* Read-only version is available."
          echo ""
          display_noaccess
          tput cup 22 0
          echo "Should $selectedName be read only?"
          echo -n "y or n then ENTER ->:"
          read ronly
          case "$ronly" in
          y)
            ronly=1
            additionChoices+=("$selectedName$sep$ronly$sep$selectedID")
            inputCheck=1
          ;;
          n)
            ronly=0
            additionChoices+=("$selectedName$sep$ronly$sep$selectedID")
            inputCheck=1
          ;;
          *)
            echo "Just enter yes or no."
            echo "Press ENTER to try again:"
            read
          esac
        done
      fi
    else
       clear
       display_noaccess
       tput cup 22 0
       echo -n "Invalid response. Only choose from the "
       echo    "available option numbers."
       echo -n "Press Enter:"
       read
    fi
    #Loop using while until user adds no more screens
    clear
    echo -n "           Here are the $typeWord"
    echo -n "s which "
    echo "may be added for $user:"
    echo " * Read-only version is available."
    echo ""
    display_noaccess
    tput cup 22 0
    echo -n "Do you want to add more $typeWord"
    echo "s for $user?"
    echo -n "y or n ->:"
    read addMore
    badInput=1
    while [ $badInput -eq 1 ]; do
      case $addMore in
      y)#Input is fine, go back to add another screen
        badInput=0
        #No more screens can be added
        if [ ${#canAdd[@]} -eq ${#addList[@]} ]; then
          echo -n "No $typeWord"
          echo "s remain for adding."
          echo -n "Press ENTER to add selected $typeWord"
          echo -n "s:"
          read
          flag=1
          add_permissions additionChoices[@]
        fi
      ;;
      n)#Add permissions, then exit back to main menu
        badInput=0
        flag=1
	add_permissions additionChoices[@]
      ;;
      *)#Erroneous Input 
        echo "Invalid Response. Just enter y or n."
        echo -n "->:"
        read addMore
      esac
    done
fi
done
;;
2)#User elects to remove permissions
flag=0
removeList=()
removalScreenIDs=()
while [ $flag -eq 0 ]; do
  clear
  echo -n "            "
  echo -n "The following $typeWord"
  echo "s are available to $user"
  echo ""
  display_screens
  
  tput cup 20 0
  echo -n " The following $typeWord"
  echo -n "s are selected for removal:"
  echo " ${removeList[@]}"
  #Case where user has no screens, back out to menu
  if [ ${#userScreens[@]} -eq 0 ]; then
    echo -n " User $user has no $typeWord"
    echo "s to remove."
    echo " Returning to main menu..."
    echo -n " Press ENTER:"
    read
    flag=1
  #Continue to removal process
  else
    accessSize=${#userScreens[@]}
    clear
    echo -n "            "
    echo -n "The following $typeWord"
    echo "s are available to $user"
    echo ""
    display_screens
    tput cup 20 0
    echo -n " The following $typeWord"
    echo "s are selected for removal:"
    echo " ${removeList[@]}"
    echo " Enter an option number to remove for $user"
    echo -n  " ->:"
    read toRemove
    #Check for valid removal choice
    if (( 1 <= $toRemove && $toRemove <= $accessSize ))
    then
      #Corresponding screen is added to removal array
      removeList+=($toRemove)
      removalScreenIDs+=($(echo "${userScreens[ \ 
                        (($toRemove-1))]}" \
                        | cut -d "|" -f1))
      clear
      echo -n "            "
      echo "The following permissions are available to $user"
      echo ""
      display_screens
      tput cup 20 0
      echo -n " The following $typeWord"
      echo "s are selected for removal:"
      echo " ${removeList[@]}"
      echo -n "Do you want to remove more $typeWord"
      echo "s from $user?"
      echo -n "y or n ->:"
      read addMore
      badInput=1
      while [ $badInput -eq 1 ]; do
        case $addMore in
        y)#Check to see if any screens remain
           badInput=0
           if [ ${#removeList[@]} -eq $accessSize ]; then
             echo -n "No $typeWord"
             echo "s remain for removing."
             echo -n "Press ENTER to remove all $typeWord"
             echo -n "s:"
             read
             remove_permissions "${removalScreenIDs[@]}"
             flag=1
           fi
        ;;
        n)#Remove permissions, then exit back to main menu
          badInput=0
          flag=1
          remove_permissions "${removalScreenIDs[@]}"
        ;;
        *)#Erroneous Input
          echo "Invalid Response. Just enter y or n."
          echo -n "->:"
          read addMore
        esac
      done
    else
      echo -n "Invalid response. Only choose from the "
      echo    "available option numbers."
      echo -n "Press ENTER to continue :"
      read
    fi
  fi
done
;;
3)#Change user for editing
select_user
;;
e|q|exit|quit|E|Q|EXIT|QUIT|GETMEOUTTAHERE)
  exit
;;
*)
esac
done
